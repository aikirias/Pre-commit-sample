# Pre-commit-sample

You need to install the following tools to use the standards of the team:

. pip install pre-commit
. in the repo root folder run: pre-commit install
. and also: pre-commit install --hook-type commit-msg

maybe you will need to install golarg: sudo apt install golang-go
and cargo : curl https://sh.rustup.rs -sSf | sh

HOW TO USE 

basically once you have all installed you could create your new files or make a modification on the existing files and once you make a commit all the tests are going to be made 
on the files that you commited 

you also could run the tests across all the files in the repository:

pre-commit run --all-files 

if you only want to run the tests for one file you could use:

pre-commit run --files 'you/file/path/file.format'


if you want to, you could update all your hooks by running

pre-commit autoupdate

## Commits message standard

as a good practice, we are going to follow the next comment system for the commits:

        FEAT: New feature
        FIX: an error fix
        DOCS: Changes in documentation or in the comments on the code
        STYLE: Changes just in the formatting of the code (meaning blank spaces, formatting, missing semicolon, etc.)
        REFACTOR: A change in the code that does not fix an error nor add a feature
        TEST: Adding test (Creating a new test must be considered as FEAT)
        PERF: Change in code that boosts performance
        REVERT: Rollbacks (that particular commit must be commented in the message)
        CHORE: Changes in thhe build (compile) process or auxiliary tools and/or libraries such as documentation generators


EXAMPLE

git commit -m "FIX: fixed user not able to log in issue"
